using System;
using System.Collections.Generic;
using System.Reflection.Emit;
using System.Reflection;
using System.Diagnostics;

// ReSharper disable CheckNamespace
namespace FluentIL.Emitters
// ReSharper restore CheckNamespace
{
	public partial class DynamicMethodBody
	{
		readonly Stack<Action> preEmitActions = new Stack<Action>();
		private void ExecutePreEmitActions()
		{
			while ( preEmitActions.Count > 0 ) 
                preEmitActions.Pop()();
		}

		#region Emit (basic)
        public DynamicMethodBody Emit(OpCode opcode)
        {
			ExecutePreEmitActions();
			#if DEBUG
			Console.WriteLine(string.Format("\t{0}", opcode));
			#endif
            _methodInfo.GetILEmitter()
                .Emit(opcode);

            return this;
        }
        #endregion


<#		string [] types = new string [] {
			"string", "int", "double", "Label", "MethodInfo", "ConstructorInfo", "FieldInfo", "Type" };
		foreach (var t in types)
		{
#>
		public DynamicMethodBody Emit(OpCode opcode, <#=t#> arg)
        {
			ExecutePreEmitActions();
			#if DEBUG
			<#if (t=="Label") {#>
			Console.WriteLine("\t{0} IL_{1}", opcode, arg.GetHashCode());
			<#} else if (t=="FieldInfo") {#>
			Console.WriteLine("\t{0} {1}", opcode, arg.Name);
			<#} else if (t=="ConstructorInfo") {#>
			Console.WriteLine("\t{0} [{1}] {2}", opcode, arg.DeclaringType, arg);
			<#} else if (t=="string") {#>
			Console.WriteLine("\t{0} \"{1}\"", opcode, arg);
			<#} else {#>
			Console.WriteLine("\t{0} {1}", opcode, arg);
			<#}#>
			#endif
			
			_methodInfo.GetILEmitter()
                .Emit(opcode, arg);

            return this;
        }

<#
		}
#>
	}
}
