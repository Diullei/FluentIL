using System;
using System.Collections.Generic;
using System.Reflection.Emit;

using FluentIL.Numbers;

<#		string [] opcodes = new string [] {
			"Beq", "Beq_S", 
			"Bne_Un", "Bne_Un_S",
			"Bge", "Bge_S", "Bge_Un", "Bge_Un_S", 
			"Bgt", "Bgt_S", "Bgt_Un", "Bgt_Un_S", 
			"Ble", "Ble_S", "Ble_Un", "Ble_Un_S", 
			"Blt", "Blt_S", "Blt_Un", "Blt_Un_S", 
			"Brtrue", "Brfalse", "Brtrue_S", "Brfalse_S",
			"Br", "Br_S" };
#>
// ReSharper disable CheckNamespace
namespace FluentIL.Emitters
// ReSharper restore CheckNamespace
{
	public partial class DynamicMethodBody
	{
		readonly Stack<IfEmitter> ifEmitters = new Stack<IfEmitter>();
		public DynamicMethodBody Else()
		{
			ifEmitters.Peek().EmitElse();
			return this;
		}

		public DynamicMethodBody EndIf()
		{
			ifEmitters.Pop().EmitEndIf();
			return this;
		}
		
		private void SaveLeftSideToVariable(Type t)
		{
			var emitter = ifEmitters.Peek();
			var variable = emitter.LeftSideVarName;

			if (!emitter.MultipleConditions)
			{
				if (GetVariableIndex(variable) == -1)
				{
					methodInfo.WithVariable(typeof(int), variable);
					methodInfo.GetILEmitter().DeclareLocal(t);
				}
				preEmitActions.Push( () =>
				{
					Stloc(variable);
					Ldloc(variable);
				} );

				emitter.MultipleConditions = true;
			}
		}

		private DynamicMethodBody And(Number right, OpCode opcode, bool not = false)
		{
			var emitter = ifEmitters.Peek();
			var variable = emitter.LeftSideVarName;
			var a = preEmitActions.Pop();

			SaveLeftSideToVariable(typeof(int));

			preEmitActions.Push( () =>
				{
					a();
					Ldloc(variable);
					Emit(right);
					emitter.EmitIf(opcode, not);
				}
				);
			return this;
		}

<#
		foreach (var opcode in opcodes)
		{
#>
		#region <#= opcode #>
		// ReSharper disable InconsistentNaming
		public DynamicMethodBody <#= opcode #>(string label)
		// ReSharper restore InconsistentNaming
        {
            return <#= opcode #>(GetLabel(label));
        }

        // ReSharper disable InconsistentNaming
		public DynamicMethodBody <#= opcode #>(Label label)
		// ReSharper restore InconsistentNaming
        {
            return Emit(OpCodes.<#= opcode #>, label);
        }

<#		if (!opcode.StartsWith("Br") && 
		!opcode.StartsWith("Bge") && !opcode.EndsWith("_S")
		&& !opcode.Equals("Ble") && !opcode.Equals("Ble_Un") 
		&& !opcode.Equals("Bne_Un")
		) { #>
		// ReSharper disable InconsistentNaming
		public DynamicMethodBody C<#= opcode.Substring(1) #>()
		// ReSharper restore InconsistentNaming
		{
			return Emit(OpCodes.C<#= opcode.Substring(1) #>);
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody If<#= opcode.Substring(1) #>()
		// ReSharper restore InconsistentNaming
		{
			var emitter = new IfEmitter(this);
			ifEmitters.Push(emitter);
			emitter.EmitIf(OpCodes.C<#= opcode.Substring(1) #>);
			return this;
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody If<#= opcode.Substring(1) #>(double right)
		// ReSharper restore InconsistentNaming
		{
			LdcR8(right);
			return If<#= opcode.Substring(1) #>();
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody If<#= opcode.Substring(1) #>(int right)
		// ReSharper restore InconsistentNaming
		{
			var emitter = new IfEmitter(this);
			ifEmitters.Push(emitter);
			preEmitActions.Push( () => 
				{
					LdcI4(right);
					emitter.EmitIf(OpCodes.C<#= opcode.Substring(1) #>);
				}
				);
			return this; 
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody And<#= opcode.Substring(1) #>(int right)
		// ReSharper restore InconsistentNaming
		{
			return And(right, OpCodes.C<#= opcode.Substring(1) #>);
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody AndNot<#= opcode.Substring(1) #>(int right)
		// ReSharper restore InconsistentNaming
		{
			return And(right, OpCodes.C<#= opcode.Substring(1) #>, true);
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody IfNot<#= opcode.Substring(1) #>()
		// ReSharper restore InconsistentNaming
		{
			var emitter = new IfEmitter(this);
			ifEmitters.Push(emitter);
			emitter.EmitIf(OpCodes.C<#= opcode.Substring(1) #>, true);
			return this;
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody IfNot<#= opcode.Substring(1) #>(double right)
		// ReSharper restore InconsistentNaming
		{
			LdcR8(right);
			return IfNot<#= opcode.Substring(1) #>();
		}

		// ReSharper disable InconsistentNaming
		public DynamicMethodBody IfNot<#= opcode.Substring(1) #>(int right)
		// ReSharper restore InconsistentNaming
		{
			LdcI4(right);
			return IfNot<#= opcode.Substring(1) #>();
		}

<#		}#>
		#endregion

<#
		}
#>

		public DynamicMethodBody Cge()
		{
			return Clt()
				.Ldc(0)
				.Ceq();
		}
		
		
		public DynamicMethodBody Cle()
        {
            return Cgt()
                .Ldc(0)
                .Ceq();
        }
		
		public DynamicMethodBody Ifge(int right)
		{
			return Ifgt(right - 1);
		}

		public DynamicMethodBody Ifle(int right)
		{
			return Iflt(right + 1);
		}

		public DynamicMethodBody Andle(int right)
		{
			return Andlt(right + 1);
		}

		public DynamicMethodBody AndNotle(int right)
		{
			return AndNotlt(right + 1);
		}

	}
}
